stages:
  - deploy-test-env
  - test
  - delete-test-env
  - release

# Развертывание тестовой среды с использованием встроенного образа контейнера.
deploy-test-env-job:
  stage: deploy-test-env
  image: alpine:latest
  script:
# Установка инструментов.
    - apk add -q --no-cache bash curl jq gettext zip rust cargo gcc build-base freetype-dev libpng-dev openblas-dev libffi-dev python3 python3-dev py3-pip
    - apk add yq --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community
    - curl -f -s -LO https://storage.yandexcloud.net/yandexcloud-yc/install.sh
    - bash install.sh -i /usr/local/yandex-cloud -n
    - ln -s /usr/local/yandex-cloud/bin/yc /usr/local/bin/yc
 # Аутентификация с помощью ключа сервисного аккаунта.
    - echo "$SA_TESTING_DEPLOYER_PRIVATE_KEY" > key.json
    - yc config profile create sa-profile
    - yc config set service-account-key key.json
# Установка переменных для развертывания API Gateway и создание контейнера.
    - export sa_id=$TESTING_SA_ID
# Деплой через yappa-у Product-части
    - pip install setuptools_rust
    - CRYPTOGRAPHY_DONT_BUILD_RUST=1 pip install yappa -U
    - cp key.json ./product/.yc
    - export folder_id=$(yc resource-manager folder get ${psb_testing} --cloud-id ${cloud_id} | yq .id)
    - export sa_name=$(yc iam service-account get ${sa_id} --format=json | jq -r '.name')
    - export pname=testing-product
    - (cat ./product/yappa.yaml.j2 | envsubst) > ./product/yappa.yaml
    - cd ./product/ && yappa deploy && cd ../
    - export product_function_id=$(yc serverless function get testing-product --cloud-id ${cloud_id} --folder-name ${psb_testing} | yq .id )
    - (cat ./product/openapi.yaml.j2 | envsubst) > ./product/openapi.yaml
    - yc serverless api-gateway create --name testing-product --spec=./product/openapi.yaml --description "created from gitlab CI" --cloud-id ${cloud_id} --folder-name ${psb_testing}
# Деплой функции для аутентификации
    - export token=${testing_auth_token}
    - (cat ./auth/function/params.json.j2 | envsubst) > ./auth/function/params.json
    - zip ./auth/function.zip -r ./auth/function
    - yc serverless function create --name testing-auth --cloud-id ${cloud_id} --folder-name ${psb_testing} 
    - yc serverless function version create --function-name testing-auth --runtime nodejs16  --entrypoint /auth/function/index.handler --memory 128m --execution-timeout 10s --source-path ./auth/function.zip --cloud-id ${cloud_id} --folder-name ${psb_testing}
    - export auth_function_id=$(yc serverless function get testing-auth --cloud-id ${cloud_id} --folder-name ${psb_testing} | yq .id)
# Деплой функции для подсчета скоринга
    - zip ./score/function.zip -r ./score/function
    - yc serverless function create --name testing-score --cloud-id ${cloud_id} --folder-name ${psb_testing}
    - yc serverless function version create --function-name testing-score --runtime nodejs16  --entrypoint score/function/index.handler --memory 128m --execution-timeout 10s --source-path ./score/function.zip --cloud-id ${cloud_id} --folder-name ${psb_testing}
    - export score_function_id=$(yc serverless function get testing-score --cloud-id ${cloud_id} --folder-name ${psb_testing} | yq .id)
# Деплой Gateway для скоринг-функции
    - (cat ./score/openapi.yaml.j2 | DOLLAR='$' envsubst) > ./score/openapi.yaml
    - cat ./score/openapi.yaml
    - yc serverless api-gateway create --name testing-score --spec=./score/openapi.yaml --description "created from gitlab CI" --cloud-id ${cloud_id} --folder-name ${psb_testing}
# Экспорт url созданных gateway-ов в env-ы для дальнейшей подстановки в центральный сервис
    - export productdomain=$(yc serverless api-gateway get testing-product --cloud-id ${cloud_id} --folder-name ${psb_testing} | yq .domain)
    - export scoredomain=$(yc serverless api-gateway get testing-score --cloud-id ${cloud_id} --folder-name ${psb_testing} | yq .domain)
    - echo "https://"$productdomain
    - echo "https://"$scoredomain
# Развертывание центральной функции.
    - (cat ./backend/function/params.json.j2 | envsubst) > ./backend/function/params.json
    - zip ./backend/function.zip -r ./backend/function
    - export main_function_id=$(yc serverless function create --name testing-main --cloud-id ${cloud_id} --folder-name ${psb_testing} | yq .id)
    - yc serverless function version create --function-name testing-main --runtime nodejs16  --entrypoint backend/function/index.handler --memory 128m --execution-timeout 10s --source-path ./backend/function.zip --cloud-id ${cloud_id} --folder-name ${psb_testing}
# Развертывание Gateway для центральной функции
    - (cat ./backend/openapi.yaml.j2 | envsubst) > ./backend/openapi.yaml
    - yc serverless api-gateway create --name testing-main --spec=./backend/openapi.yaml --description "created from gitlab CI" --cloud-id ${cloud_id} --folder-name ${psb_testing}
# Настройка шаблона и развертывание API Gateway.
    - mkdir output
    - export gwdomain=$(yc serverless api-gateway get testing-main --cloud-id ${cloud_id} --folder-name ${psb_testing} | yq .domain)
    - echo "https://"$gwdomain>output/gwurl
  artifacts:
    paths: [output/]

e2e-test-job:
  stage: test
  image: alpine:3.15
  script:
    - apk add -q --no-cache bash curl
    - apk add yq --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community
    - cat output/gwurl
    - export gwurlvar=$(cat output/gwurl)
    - curl $gwurlvar

load-test-job:
  stage: test
  image: alpine:3.15
  script:
    - echo "Here goes load testing commands"
    - echo "Might even invoke bash with prepared bash script"
    - echo "Hello!"

delete-test-env-job:
  stage: delete-test-env
  image: alpine:3.15
  script:
    - apk add -q --no-cache bash curl jq gettext yq
    - curl -f -s -LO https://storage.yandexcloud.net/yandexcloud-yc/install.sh
    - bash install.sh -i /usr/local/yandex-cloud -n
    - ln -s /usr/local/yandex-cloud/bin/yc /usr/local/bin/yc
    - echo "$SA_TESTING_DEPLOYER_PRIVATE_KEY" > key.json
    - yc config profile create sa-profile
    - yc config set service-account-key key.json
    - yc serverless api-gateway delete testing-product --cloud-id ${cloud_id} --folder-name ${psb_testing}
    - yc serverless api-gateway delete testing-score --cloud-id ${cloud_id} --folder-name ${psb_testing}
    - yc serverless api-gateway delete testing-main --cloud-id ${cloud_id} --folder-name ${psb_testing}
    - yc serverless function delete testing-product --cloud-id ${cloud_id} --folder-name ${psb_testing}
    - yc serverless function delete testing-score --cloud-id ${cloud_id} --folder-name ${psb_testing}
    - yc serverless function delete testing-main --cloud-id ${cloud_id} --folder-name ${psb_testing}
    - yc serverless function delete testing-auth --cloud-id ${cloud_id} --folder-name ${psb_testing}

release-job:
  stage: release
  image: alpine:latest
  script:
# Установка инструментов.
    - apk add -q --no-cache bash curl jq gettext zip rust cargo gcc build-base freetype-dev libpng-dev openblas-dev libffi-dev python3 python3-dev py3-pip
    - apk add yq --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community
    - curl -f -s -LO https://storage.yandexcloud.net/yandexcloud-yc/install.sh
    - bash install.sh -i /usr/local/yandex-cloud -n
    - ln -s /usr/local/yandex-cloud/bin/yc /usr/local/bin/yc
 # Аутентификация с помощью ключа сервисного аккаунта.
    - echo "$SA_PROD_DEPLOYER_PRIVATE_KEY" > key.json
    - yc config profile create sa-profile
    - yc config set service-account-key key.json
# Установка переменных для развертывания API Gateway и создание контейнера.
    - export sa_id=$PROD_SA_ID
# Релиз через yappa-у Product-части
    - pip install setuptools_rust
    - CRYPTOGRAPHY_DONT_BUILD_RUST=1 pip install yappa -U
    - cp key.json ./product/.yc
    - export folder_id=$(yc resource-manager folder get ${psb_prod} --cloud-id ${cloud_id} | yq .id)
    - export sa_name=$(yc iam service-account get ${sa_id} --format=json | jq -r '.name')
    - export pname=production-product
    - (cat ./product/yappa.yaml.j2 | envsubst) > ./product/yappa.yaml
    - cd ./product/ && yappa deploy && cd ../
    - export product_function_id=$(yc serverless function get production-product --cloud-id ${cloud_id} --folder-name ${psb_prod} | yq .id )
    - (cat ./product/openapi.yaml.j2 | envsubst) > ./product/openapi.yaml
    - yc serverless api-gateway update --name production-product --spec=./product/openapi.yaml --description "created from gitlab CI" --cloud-id ${cloud_id} --folder-name ${psb_prod}
# Релиз функции для аутентификации
    - export token=${prod_auth_token}
    - (cat ./auth/function/params.json.j2 | envsubst) > ./auth/function/params.json
    - zip ./auth/function.zip -r ./auth/function
    - yc serverless function version create --function-name production-auth --runtime nodejs16  --entrypoint /auth/function/index.handler --memory 128m --execution-timeout 10s --source-path ./auth/function.zip --cloud-id ${cloud_id} --folder-name ${psb_prod}
# Релиз функции для подсчета скоринга
    - zip ./score/function.zip -r ./score/function
    - yc serverless function version create --function-name production-score --runtime nodejs16  --entrypoint score/function/index.handler --memory 128m --execution-timeout 10s --source-path ./score/function.zip --cloud-id ${cloud_id} --folder-name ${psb_prod}
# Релиз Gateway для скоринг-функции
    - export auth_function_id=$(yc serverless function get production-auth --cloud-id ${cloud_id} --folder-name ${psb_prod} | yq .id)
    - export score_function_id=$(yc serverless function get production-score --cloud-id ${cloud_id} --folder-name ${psb_prod} | yq .id)
    - (cat ./score/openapi.yaml.j2 | DOLLAR='$' envsubst) > ./score/openapi.yaml
    - cat ./score/openapi.yaml
    - yc serverless api-gateway update --name production-score --spec=./score/openapi.yaml --description "created from gitlab CI" --cloud-id ${cloud_id} --folder-name ${psb_prod}
# Экспорт url созданных gateway-ов в env-ы для дальнейшей подстановки в центральный сервис
    - export productdomain=$(yc serverless api-gateway get production-product --cloud-id ${cloud_id} --folder-name ${psb_prod} | yq .domain)
    - export scoredomain=$(yc serverless api-gateway get production-score --cloud-id ${cloud_id} --folder-name ${psb_prod} | yq .domain)
    - echo "https://"$productdomain
    - echo "https://"$scoredomain
# Релиз центральной функции.
    - (cat ./backend/function/params.json.j2 | envsubst) > ./backend/function/params.json
    - zip ./backend/function.zip -r ./backend/function
    - yc serverless function version create --function-name production-main --runtime nodejs16  --entrypoint index.handler --memory 128m --execution-timeout 10s --source-path ./backend/function/ --cloud-id ${cloud_id} --folder-name ${psb_prod}
# Релиз Gateway для центральной функции
    - export main_function_id=$(yc serverless function get production-main --cloud-id ${cloud_id} --folder-name ${psb_prod} | yq .id)   
    - (cat ./backend/openapi.yaml.j2 | envsubst) > ./backend/openapi.yaml
    - yc serverless api-gateway update --name production-main --spec=./backend/openapi.yaml --description "created from gitlab CI" --cloud-id ${cloud_id} --folder-name ${psb_prod}
# Настройка шаблона и развертывание API Gateway.
    - export maingwid=$(yc serverless api-gateway get production-main --cloud-id ${cloud_id} --folder-name ${psb_prod} | yq .id)
    - yc compute instance update-container --name front-vm --container-image=plzdontcry/psb-front:amd64 --container-env REACT_APP_GATEWAY_ID=$maingwid --cloud-id ${cloud_id} --folder-name ${psb_prod}

# Создание продакшн среды.
